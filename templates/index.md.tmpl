---
page_title: "Provider: Assert"
description: |-
  The Assert provider provides functions to verify values in your Terraform configurations to make sure they meet specific criteria.
---

# Assert Provider

The Assert provider for Terraform is a utility provider that offers a comprehensive set of assertion capabilities through provider-defined functions such as [http_success](https://registry.terraform.io/providers/hashicorp/assert/latest/docs/functions/http_success), [expired](https://registry.terraform.io/providers/hashicorp/assert/latest/docs/functions/expired), and [between](https://registry.terraform.io/providers/hashicorp/assert/latest/docs/functions/between). These assertion functions simplify your Terraform configurations, making variable validation, continuous validation, and testing easier.

The Assert provider functions complement Terraform’s [built-in](https://developer.hashicorp.com/terraform/language/functions) functions rather than replacing them. If Terraform’s built-in functions better fit your requirements, they should be your choice.

This provider does not manage any infrastructure, but instead provides a set of provider-defined functions
that can be used to assert that values in Terraform configurations.

Use the navigation to the left to read about the available resources.

## Example Usage

As of Terraform 1.8 and later, providers can implement functions that you can call from the Terraform configuration. 

To use the Assert provider, declare it as a `required_provider` in the `terraform {}` block:

{{ tffile "examples/provider/provider.tf" }}

## Function Syntax

You use the functions with a special syntax: `provider::assert::<function_name>`. 

For instance, to check if an HTTP status code falls within the success range, use the `http_success` function and call it using `provider::assert::http_success(data.http.example.status_code)`.
